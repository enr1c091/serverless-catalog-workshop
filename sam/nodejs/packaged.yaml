AWSTemplateFormatVersion: 2010-09-09
Description: sam-app
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  ProjectName:
    Type: String
  Stage:
    Type: String
Conditions:
  CreateProdResources:
    Fn::Equals:
    - Ref: Stage
    - Prod
Globals:
  Function:
    Timeout: 5
    Tracing: Active
    MemorySize: 1024
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type:
        Fn::If:
        - CreateProdResources
        - Canary10Percent5Minutes
        - AllAtOnce
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: '''OPTIONS,POST,GET'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-${Stage}
      StageName: Prod
      MethodSettings:
      - MetricsEnabled: true
        ResourcePath: /*
        HttpMethod: '*'
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-pipeline-codes/2a3c3b2361ce9d0ce3a2fe2fc95bec3d
      Handler: src/items/get-all-items/index.getAllItemsHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: Api
            Path: /items
            Method: GET
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-pipeline-codes/2a3c3b2361ce9d0ce3a2fe2fc95bec3d
      Handler: src/items/get-by-id/index.getByIdHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: Api
            Path: /items/{id}
            Method: GET
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-pipeline-codes/2a3c3b2361ce9d0ce3a2fe2fc95bec3d
      Handler: src/items/put-item/index.putItemHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SampleTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: Api
            Path: /items
            Method: POST
  SampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      TableName:
        Fn::Sub: sample-${ProjectName}-${Stage}
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  SampleTable:
    Value:
      Fn::GetAtt:
      - SampleTable
      - Arn
    Description: Sample Data Table ARN
